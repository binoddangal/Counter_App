{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","this","props","totalCounters","Component","Counter","styles","fontSize","fontWeight","style","getBadgeClasses","formatCount","onClick","onIncrement","counter","aria-hidden","onDecrement","onDelete","id","classes","value","Countrs","onReset","onRestart","counters","disabled","length","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","handleRestart","window","location","reload","Fragment","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ca55f82.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Navbar{\" \"}\r\n          <span className=\"badge badge-pill badge-secondary\">\r\n            {this.props.totalCounters}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  //   state = {\r\n  //     value: this.props.counter.value\r\n  //   };\r\n\r\n  // To bind event handler\r\n  //   constructor() {\r\n  //     super();\r\n  //     this.handleIncrement = this.handleIncrement.bind(this);\r\n  //     console.log(\"Constructor\",this);\r\n  //   }\r\n\r\n  //For Value Increment\r\n  //   handleIncrement = () => {\r\n  //     this.setState({ value: this.state.value + 1 });\r\n  //   };\r\n\r\n  //   doHandleIncrement = () => {\r\n  //       this.handleIncrement({ id: 1});\r\n  //   };\r\n\r\n  styles = {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style = {this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-m m-2\"\r\n        >\r\n          <i className=\"fa fa-plus-circle\" aria-hidden=\"true\" />\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-info btn-m\"\r\n        >\r\n          <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" />\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-m m-2\"\r\n        >\r\n          <i className=\"fa fa-trash-o\" aria-hidden=\"true\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Countrs extends Component {\r\n  render() {\r\n    const {\r\n      onReset,\r\n      onRestart,\r\n      counters,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement,\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-m m-2\">\r\n          <i className=\"fa fa-refresh\" aria-hidden=\"true\" />\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary m-2\"\r\n          onClick={onRestart}\r\n          disabled={counters.length !== 0 ? \"disabled\" : \"\"}\r\n        >\r\n          <i className=\"fa fa-recycle\" aria-hidden=\"true\" />\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id} //use internally by react\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countrs;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    //   console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n    // console.log(this.state.counters[index]);\n  };\n\n  handleDecrement = (counter) => {\n    //   console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n    this.setState({ counters });\n    // console.log(this.state.counters[index]);\n  };\n\n  handleReset = () => {\n    // console.log(\"Event Delete Called\",counterId);\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    // console.log(\"Event Delete Called\",counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleRestart = () => {\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n            onRestart={this.handleRestart}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}